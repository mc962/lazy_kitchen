# Provides custom methods that wrap ActiveStorage methods and allow overwriting existing blob key with a custom key
#   controller by the user.
#
# @note This currently is only tested to work with Amazon S3, and so will not update the blob key for any other storage backend
module ActiveStoragePath
  extend ActiveSupport::Concern

  class_methods do
    # Decorates ActiveStorage has_one_attached to allow a custom blob key
    #
    # @return [ActiveStorage::Attached::Changes::CreateOne]
    def has_one_attached_with(name, path:, **options) # rubocop:disable Naming/PredicateName
      has_one_attached name, **options

      define_method "#{name}=" do |attachable|
        action = super attachable

        return action unless action.is_a? ActiveStorage::Attached::Changes::CreateOne
        return action unless action.blob.service_name == 'amazon'

        # This is how it is generated by default
        original_key = action.blob.class.generate_unique_secure_token

        filename_key = "#{original_key}-#{action.blob.filename}"

        # The key is used for path + filename when Amazon S3 is used. Append path.
        action.blob.key = File.join(instance_exec(&path), filename_key)

        action
      end
    end

    # Decorates ActiveStorage has_one_attached to allow a custom blob key for each attached item
    #
    # @return [ActiveStorage::Attached::Changes::CreateMany]
    def has_many_attached_with(name, path:, **options) # rubocop:disable Naming/PredicateName
      has_many_attached name, **options

      define_method "#{name}=" do |attachables|
        action = super attachables

        return action unless action.is_a? ActiveStorage::Attached::Changes::CreateMany

        # Update each blob with a new blob key
        action.blobs.each do |blob|
          continue unless blob.service_name == 'amazon'
          # This is how it is generated by default
          original_key = blob.class.generate_unique_secure_token

          filename_key = "#{original_key}-#{blob.filename}"

          # The key is used for path + filename when Amazon S3 is used. Append path.
          blob.key = File.join(instance_exec(&path), filename_key)
        end

        action
      end
    end
  end
end